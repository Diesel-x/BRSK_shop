@page "/cart"
@using Blazored.LocalStorage
@using Front.Services
@using Shop_API.Models
@inject HttpClient Http
@inject CartService CartService
@inject ApiService ApiService
@inject IJSRuntime JS
@inject ILocalStorageService localStorage;


<PageTitle>Корзина</PageTitle>

@{
    var groupedCartItems = CartService.CartItems
        .GroupBy(item => item.Name)
        .Select(group => new { Name = group.Key, Cost = group.First().Cost, Count = group.Count() });
}

<ul>
    <h1>Корзина</h1>
\
<p>Товаров в корзине: @CartService.CartItems.Count</p>

    @foreach (var product in groupedCartItems)
    {
        <li class="d-flex flex-row">
            <div>
                @product.Name @product.Cost - @product.Count шт.
            </div>
        </li>
        <div>
            <button class ="btn alert-danger" @onclick="() => RemoveFromCart(product.Name)">Удалить</button>
        </div>
    }
    <p></p>
    <button class="btn bg-primary" @onclick="() => CreateOrder()">Оформить заказ</button>
    <p>@key</p>

</ul>

@code {
    string key;
    void RemoveFromCart(string productName)
    {
        CartService.CartItems.Remove(CartService.CartItems.FirstOrDefault(p => p.Name == productName));
    }

    protected override async Task OnInitializedAsync()
    {
        JwtToken tokenData = JwtHelper.DecodeJwtToken(await localStorage.GetItemAsync<string>("key"));
        key = tokenData.UserLogin;
    }

    private async Task CreateOrder()
    {
        JwtToken tokenData = JwtHelper.DecodeJwtToken(await localStorage.GetItemAsync<string>("key"));
        List<User> users = await ApiService.GetUsers();

        if (users != null && users.Count > 0)
        {
            var user = users.FirstOrDefault(x => x.Login == tokenData.UserLogin);
            await JS.InvokeVoidAsync(tokenData.UserName);
            if (user != null)
            {
                var response = await ApiService.PostProductsAsync(CartService.CartItems, user.Id);
                await JS.InvokeVoidAsync("Заказ");
            }
            else
            {
                // Обработка случая, когда пользователь не найден
            }
        }
        else
        {
            // Обработка случая, когда список пользователей пуст или равен null
        }
    }
}

